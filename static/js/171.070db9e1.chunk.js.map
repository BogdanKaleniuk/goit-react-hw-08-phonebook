{"version":3,"file":"static/js/171.070db9e1.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactEditor/ContactEditor.styled.js","components/ContactEditor/ContactEditor.js","components/Contact/Contsct.js","components/ContactList/ContactList.js","components/Filter/Filter.jsx","pages/ContactsPage.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.contacts.filter;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormBook = styled(Form)`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 10px;\n  margin-bottom: 10px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: large;\n  font-weight: 500;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: 10px;\n  border: 1px solid #cccccc;\n  border-radius: 4px;\n  outline: none;\n  height: 30px;\n`;\n\nexport const Btn = styled.button`\n  margin-top: 10px;\n  cursor: pointer;\n  padding: 5px;\n  border-radius: 4px;\n  background-color: #fff;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: green;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  margin-top: 5px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\n// import css from './ContactEditor.module.css';\nimport { Formik } from 'formik';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { FormBook, Input, Label, Btn, Error } from './ContactEditor.styled';\nimport * as yup from 'yup';\n// import { useState } from 'react';\n\nlet schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Please, enter name'),\n  number: yup\n    .string()\n    .min(6)\n    .max(16)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Please, enter correct number'),\n});\n\nexport const ContactEditor = () => {\n  // const [name, setName] = useState('');\n  // const [number, setNumber] = useState('');\n  // const onChangeName = e => setName(e.currentTarget.value);\n  // const onChangeNumber = e => setNumber(e.currentTarget.value);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  // const handleSubmit = values => {\n  //   const findDuplicateName = (contact, newName) => {\n  //     return contact.find(({ name }) => name.toLowerCase() === newName);\n  //   };\n\n  //   const { name } = values;\n  //   const nameToRegistr = name.toLowerCase();\n  //   if (findDuplicateName(contacts.items, nameToRegistr)) {\n  //     alert(`${name} is already in your contacts`);\n  //     return;\n  //   }\n\n  //   dispatch(addContact(values));\n  //   // resetForm();\n  //   // alert(`${name} has been added to your contacts`);\n  // };\n\n  // const resetForm = () => {\n  //   setName('');\n  //   setNumber('');\n  // };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      // initialValues={initialValues}\n      // validationSchema={schema}\n      onSubmit={(values, { resetForm }) => {\n        const findDuplicateName = (contact, newName) => {\n          return contact.find(({ name }) => name.toLowerCase() === newName);\n        };\n        const { name } = values;\n        const nameToRegistr = name.toLowerCase();\n        if (findDuplicateName(contacts.items, nameToRegistr)) {\n          alert(`${name} is already in your contacts`);\n          return;\n        }\n\n        dispatch(addContact(values));\n        resetForm();\n      }}\n    >\n      <FormBook autoComplete=\"off\">\n        <Label>\n          Name\n          <Input\n            // onChange={onChangeName}\n            type=\"text\"\n            placeholder=\"Enter name\"\n            name=\"name\"\n            title=\"Name may contain only letters\"\n          />\n          <Error name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          Number\n          <Input\n            // onChange={onChangeNumber}\n            type=\"tel\"\n            placeholder=\"+380\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <Error name=\"number\" component=\"div\" />\n        </Label>\n\n        <Btn type=\"submit\">Add contact</Btn>\n      </FormBook>\n    </Formik>\n  );\n};\n\n// return (\n//   <form className={css.form} onSubmit={handleSubmit}>\n//     <input name=\"name\" className={css.input} />\n//     <input name=\"number\" className={css.input} />\n//     <button type=\"submit\" className={css.button}>\n//       Add contact\n//     </button>\n//   </form>\n// );\n","import { DeleteIcon } from '@chakra-ui/icons';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Card, Text, CardBody, Button, Flex, Box } from '@chakra-ui/react';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n  // const active = name === number;\n  const innerBoxStyles = {\n    display: 'block',\n    fontSize: '20px',\n  };\n  return (\n    <Box sx={innerBoxStyles}>\n      <Card>\n        <CardBody>\n          <Flex pl=\"5\">\n            <Text>\n              {name} : {number}\n            </Text>\n\n            <Button\n              color=\"green\"\n              bg=\"white\"\n              // bg={active ? 'glassTeal' : undefined}\n              // color={active ? '#202023' : undefined}\n              _hover={{\n                background: 'red',\n                color: 'white',\n                br: '5',\n              }}\n              type=\"button\"\n              onClick={handleDelete}\n            >\n              {/* Delete */}\n              <DeleteIcon w={15} h={15} />\n            </Button>\n          </Flex>\n        </CardBody>\n      </Card>\n    </Box>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { Contact } from 'components/Contact/Contsct';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Flex } from '@chakra-ui/react';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = () => {\n    // const normFilter = ;\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase()?.includes(filter.toLowerCase())\n    );\n  };\n  const visibleContacts = filteredContacts();\n\n  return (\n    <ul>\n      <Flex\n        justifyContent=\"center\"\n        gap=\"10px\"\n        wrap=\"wrap\"\n        display=\"block\"\n        backgroundColor=\"#F7FAFC\"\n      >\n        {visibleContacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n      </Flex>\n    </ul>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Input } from '@chakra-ui/react';\nimport { Heading, Flex } from '@chakra-ui/react';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = event => {\n    dispatch(updateFilter(event.currentTarget.value));\n  };\n  return (\n    <>\n      <Flex justifyContent=\"center\">\n        <Heading as=\"h2\" size=\"l\">\n          Find contacts\n        </Heading>\n      </Flex>\n      <Flex justifyContent=\"center\" paddingBottom=\"8px\" paddingTop=\"8px\">\n        <Input\n          width=\"auto\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter search name\"\n          value={filter}\n          onChange={onFilterChange}\n        />\n      </Flex>\n    </>\n  );\n}\n\n// Filter.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   filter: PropTypes.string.isRequired,\n// };\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { TaskList } from 'components/ContactList/ContactList';\nimport { ContactEditor } from 'components/ContactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n} from 'redux/contacts/selectors';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter.jsx';\nimport { CircularProgress } from '@chakra-ui/react';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactEditor />\n\n      {contacts.length > 0 && (\n        <>\n          <Filter />\n        </>\n      )}\n      <div>\n        {isLoading && (\n          <CircularProgress isIndeterminate color=\"green.300\" size=\"30px\" />\n        )}\n      </div>\n      <ContactList />\n      {error}\n      {contacts.length > 1 && <div>У вас {contacts.length} контактів </div>}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","FormBook","styled","Form","Label","Input","Field","Btn","Error","ErrorMessage","schema","yup","shape","name","matches","required","number","min","max","ContactEditor","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","contact","newName","resetForm","nameToRegistr","toLowerCase","find","alert","addContact","autoComplete","type","placeholder","title","component","Contact","id","sx","display","fontSize","pl","color","bg","_hover","background","br","onClick","deleteContact","w","h","ContactList","visibleContacts","includes","justifyContent","gap","wrap","backgroundColor","map","Filter","as","size","paddingBottom","paddingTop","width","value","onChange","event","updateFilter","currentTarget","ContactsPage","useEffect","fetchContacts","length","isIndeterminate"],"sourceRoot":""}